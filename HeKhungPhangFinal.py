
import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
from math import cos, sin, radians, degrees, sqrt
from sympy import symbols, Eq, solve, sympify, simplify

st.set_page_config(layout="wide")
st.title("M√¥ ph·ªèng H·ªá Khung Ph·∫≥ng")

st.sidebar.header("Th√¥ng s·ªë V·∫≠t li·ªáu v√† H√¨nh h·ªçc")

E = float(st.sidebar.text_input("E (N/m¬≤)", "2e11"))
v = float(st.sidebar.text_input("v", "0.3"))
A = float(st.sidebar.text_input("A (m¬≤)", "0.01"))
I = float(st.sidebar.text_input("I (m‚Å¥)", "0.00001"))

st.sidebar.markdown("---")

num_nodes = st.sidebar.number_input("S·ªë l∆∞·ª£ng Node", min_value=2, step=1)
num_elements = st.sidebar.number_input("S·ªë l∆∞·ª£ng ph·∫ßn t·ª≠", min_value=1, step=1)

coords = []
elements = []

st.subheader("T·ªça ƒë·ªô c√°c Node (x, y)")
for i in range(int(num_nodes)):
    col1, col2 = st.columns(2)
    x = col1.number_input(f"x{i+1}", key=f"x{i}", value=0.0)
    y = col2.number_input(f"y{i+1}", key=f"y{i}", value=0.0)
    coords.append((x, y))

st.subheader("Danh s√°ch ph·∫ßn t·ª≠ (i, j)")
for i in range(int(num_elements)):
    col1, col2 = st.columns(2)
    ni = col1.number_input(f"Node i - ph·∫ßn t·ª≠ {i+1}", min_value=1, max_value=int(num_nodes), key=f"e{i}_start")
    nj = col2.number_input(f"Node j - ph·∫ßn t·ª≠ {i+1}", min_value=1, max_value=int(num_nodes), key=f"e{i}_end")
    elements.append((int(ni)-1, int(nj)-1))

# V·∫Ω s∆° ƒë·ªì khung
if st.button("V·∫Ω s∆° ƒë·ªì khung"):
    fig, ax = plt.subplots()
    for i, (start, end) in enumerate(elements):
        x1, y1 = coords[start]
        x2, y2 = coords[end]
        ax.plot([x1, x2], [y1, y2], 'bo-', label=f"Ph·∫ßn t·ª≠ {i+1}")
        ax.text((x1 + x2) / 2, (y1 + y2) / 2, f"{i+1}", color="red")

    for i, (x, y) in enumerate(coords):
        ax.text(x, y, f"{i+1}", fontsize=10, color="green")

    ax.set_aspect("equal")
    ax.set_title("S∆° ƒë·ªì H·ªá Khung")
    st.pyplot(fig)

# T√≠nh Ke v√† K t·ªïng th·ªÉ
Ke_all = []
dof_per_node = 3
total_dof = int(num_nodes) * dof_per_node
K_global = np.zeros((total_dof, total_dof))

def element_dofs(node_i, node_j):
    return [
        node_i * 3 + 0, node_i * 3 + 1, node_i * 3 + 2,
        node_j * 3 + 0, node_j * 3 + 1, node_j * 3 + 2
    ]

if st.button("T√≠nh K ph·∫ßn t·ª≠ v√† K t·ªïng th·ªÉ"):
    st.subheader("Ma tr·∫≠n ƒë·ªô c·ª©ng ph·∫ßn t·ª≠ v√† t·ªïng th·ªÉ")
    for idx, (i, j) in enumerate(elements):
        xi, yi = coords[i]
        xj, yj = coords[j]
        L = sqrt((xj - xi)**2 + (yj - yi)**2)
        angle = radians(degrees(np.arctan2((yj - yi), (xj - xi))))
        c = cos(angle)
        s = sin(angle)
        B = (12 * I) / (L ** 2)
        a11 = ((A * c**2 + B * s**2) / L)
        a22 = ((A * s**2 + B * c**2) / L)
        a33 = (4 * I / L)
        a12 = ((A - B) * c * s / L)
        a13 = (-(B * L * s) / 2 / L)
        a23 = ((B * L * c) / 2 / L)
        a36 = (2 * I / L)
        Ke = np.array([
            [a11, a12, a13, -a11, -a12, a13],
            [a12, a22, a23, -a12, -a22, a23],
            [a13, a23, a33, -a13, -a23, a36],
            [-a11, -a12, -a13, a11, a12, -a13],
            [-a12, -a22, -a23, a12, a22, -a23],
            [a13, a23, a36, -a13, -a23, a33]
        ])
        Ke = np.round(Ke, 5)
        Ke_all.append(Ke)
        dofs = element_dofs(i, j)
        for m in range(6):
            for n in range(6):
                K_global[dofs[m], dofs[n]] += Ke[m, n]

        st.markdown(f"**Ph·∫ßn t·ª≠ {idx+1}** (L={L:.3f}):")
        st.text(Ke)

    st.subheader("Ma tr·∫≠n ƒë·ªô c·ª©ng t·ªïng th·ªÉ K")
    st.text(np.round(K_global, 5))

# Nh·∫≠p t·∫£i tr·ªçng t·∫°i c√°c Dof
st.subheader("Nh·∫≠p t·∫£i tr·ªçng t·∫°i c√°c b·∫≠c t·ª± do (dof)")

load_vector = np.zeros((total_dof, 1))
for i in range(total_dof):
    val = st.text_input(f"P[{i+1}]", "0", key=f"P{i}")
    try:
        load_vector[i, 0] = float(sympify(val))
    except:
        st.warning(f"P[{i+1}] kh√¥ng h·ª£p l·ªá, d√πng gi√° tr·ªã 0")

# Nh·∫≠p ƒëi·ªÅu ki·ªán q = 0
indices_str = st.text_input("Nh·∫≠p ch·ªâ s·ªë q = 0 (ph·∫£n l·ª±c), c√°ch nhau b·ªüi d·∫•u c√°ch", "")
q_known = []
if indices_str:
    try:
        q_known = [int(i) - 1 for i in indices_str.strip().split()]
    except:
        st.warning("L·ªói ƒë·ªãnh d·∫°ng ch·ªâ s·ªë")

# T√≠nh chuy·ªÉn v·ªã
if st.button("T√≠nh chuy·ªÉn v·ªã q"):
    if len(q_known) >= total_dof:
        st.error("T·∫•t c·∫£ q ƒë·ªÅu ƒë√£ bi·∫øt = 0, kh√¥ng th·ªÉ gi·∫£i")
    else:
        try:
            K_mod = np.delete(K_global, q_known, axis=0)
            K_mod = np.delete(K_mod, q_known, axis=1)
            P_mod = np.delete(load_vector, q_known, axis=0)
            q_unknown = np.linalg.solve(E * K_mod, P_mod)
            q_full = np.zeros((total_dof, 1))
            j = 0
            for i in range(total_dof):
                if i in q_known:
                    q_full[i] = 0
                else:
                    q_full[i] = q_unknown[j]
                    j += 1
            st.subheader("Vector chuy·ªÉn v·ªã q:")
            st.text(np.round(q_full, 5))
        except Exception as e:
            st.error(f"L·ªói khi gi·∫£i h·ªá: {e}")

# ======= PH·∫¢N L·ª∞C LI√äN K·∫æT =======
if st.button("T√≠nh ph·∫£n l·ª±c li√™n k·∫øt"):
    try:
        P_goc = np.dot(K_global, q_full)
        st.subheader("Vector ph·∫£n l·ª±c li√™n k·∫øt R:")
        st.text(np.round(P_goc, 5))

        st.markdown("### üéØ √ù nghƒ©a:")
        st.markdown("- ƒê√¢y l√† vector t·∫£i g·ªëc do ma tr·∫≠n K v√† chuy·ªÉn v·ªã q t·∫°o ra.")
        st.markdown("- N·∫øu c√≥ t·∫£i t·∫°i c√°c Dof n√†o b·ªã kh·ªëng ch·∫ø (q = 0), th√¨ gi√° tr·ªã trong R s·∫Ω l√† ph·∫£n l·ª±c t·∫°i ƒë√≥.")
    except:
        st.warning("Vui l√≤ng t√≠nh chuy·ªÉn v·ªã q tr∆∞·ªõc khi t√≠nh ph·∫£n l·ª±c.")

# ======= H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG =======
with st.expander("üìò H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng"):
    st.markdown("""
### üß∞ C√°c b∆∞·ªõc s·ª≠ d·ª•ng ph·∫ßn m·ªÅm:

1. **Nh·∫≠p th√¥ng s·ªë v·∫≠t li·ªáu** ·ªü thanh b√™n tr√°i: E, v, A, I.
2. **Ch·ªçn s·ªë Node** v√† **s·ªë ph·∫ßn t·ª≠**.
3. **Nh·∫≠p t·ªça ƒë·ªô c√°c Node** theo th·ª© t·ª±.
4. **Khai b√°o c√°c ph·∫ßn t·ª≠** b·∫±ng c√°ch ch·ªçn node i v√† node j.
5. B·∫•m **"V·∫Ω s∆° ƒë·ªì khung"** ƒë·ªÉ ki·ªÉm tra s∆° ƒë·ªì h√¨nh h·ªçc.
6. B·∫•m **"T√≠nh K ph·∫ßn t·ª≠ v√† K t·ªïng th·ªÉ"** ƒë·ªÉ t·∫°o ma tr·∫≠n ƒë·ªô c·ª©ng.
7. Nh·∫≠p **vector t·∫£i tr·ªçng P** t·∫°i t·ª´ng b·∫≠c t·ª± do (dof).
8. Nh·∫≠p **c√°c ch·ªâ s·ªë q = 0** (b·∫≠c t·ª± do b·ªã kh·ªëng ch·∫ø).
9. B·∫•m **"T√≠nh chuy·ªÉn v·ªã q"** ƒë·ªÉ gi·∫£i h·ªá.
10. Cu·ªëi c√πng, b·∫•m **"T√≠nh ph·∫£n l·ª±c li√™n k·∫øt"** ƒë·ªÉ xem ph·∫£n l·ª±c t·∫°i c√°c ch·ªó q = 0.

üìå L∆∞u √Ω:
- M·ªói node c√≥ 3 b·∫≠c t·ª± do (dof): d·ªãch chuy·ªÉn x, d·ªãch chuy·ªÉn y, quay.
- Ch·ªâ s·ªë q b·∫Øt ƒë·∫ßu t·ª´ 1.
    """)
